<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Miya&#39;s Note</title>
  
  <subtitle>keep learning</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-23T09:35:33.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Miya Lee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>“正儿八经”的做一个让semantic下拉菜单更支持vue的组件（上）</title>
    <link href="http://yoursite.com/2017/11/23/blog2017-11-23/"/>
    <id>http://yoursite.com/2017/11/23/blog2017-11-23/</id>
    <published>2017-11-23T07:16:46.000Z</published>
    <updated>2017-11-23T09:35:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文将分两部分，上篇主要描述组件功能的开发，下篇将描述打包发布<br><a id="more"></a></p><p>首先给大家拜个早年。。。没想到距离上一篇竟然隔了那么久，中间发生了一些事吧。。。现在整个人应该成熟了些，社会啊</p><p>转入正题，近两年是各种mvvm框架发展的鼎盛时期啊，公司也一直在努力，终于在几个月前逐渐全员切换到了vue<img src="/images/emoticon/67.gif" alt="开心" style="display:inline; margin:0;"></p><p>然额，人生总是不能随你所欲，技术是切换了，但在UI框架上仍然使用着普通框架，比如semantic。</p><p>我不是针对谁，其他人虽然没啥感觉，但对于玩过了vuetify, mint-ui等我来说，在一个可以数据双向绑定的地方强迫被使用semantic的数据交互方式，这是何等的＊＊啊。。<img src="/images/emoticon/58.gif" alt="淌血" style="display:inline; margin:0;">而且前后端还没分离，没分离，没分离。。。</p><p>好在这是一个月前的事了，现在我的建(强)议（迫）下，我们进行了重构分离了前后端并开始使用element-ui（跪谢饿了么前端大佬们）</p><h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>咳，感觉说了很多废话。其实这个小项目早在两个月前就写好了发到git上了，迫于各种因素（懒）一直没有好好写一个笔记记录，现在好像忘的差不多了。。。README.md还是有好好写的，可以到git看：<a href="https://github.com/miyalee/vue-semantic-dropdown" target="_blank" rel="noopener">vue-semantic-dropdown</a></p><p>当时使用semantic做一些下拉菜单的需求，经常会有级联选择的那种，一来来三个，本来可以用v-modal分分钟搞定的，但奈何semantic的下拉菜单结构都是这样的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;ui selection dropdown&quot;&gt;</span><br><span class="line">  &lt;input type=&quot;hidden&quot; name=&quot;gender&quot;&gt;</span><br><span class="line">  &lt;i class=&quot;dropdown icon&quot;&gt;&lt;/i&gt;</span><br><span class="line">  &lt;div class=&quot;default text&quot;&gt;Gender&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;menu&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;item&quot; data-value=&quot;1&quot;&gt;Male&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;item&quot; data-value=&quot;0&quot;&gt;Female&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>你说我绑哪！绑最外层div肯定不对，看它交互是吧选中value放input里的，但绑在一个hidden的input也不管用啊，一个级联愣是写了几十行。。。<img src="/images/emoticon/60.gif" alt="恶心" style="display:inline; margin:0;"></p><p>通过查阅资料，我发现可以这样手动设置<br><code>&lt;input type=&quot;hidden&quot; v-model=&quot;value&quot;&gt;</code><br>then<br><code>this.$emit(&#39;input&#39;, theValue)</code><br>把它封在组件内部，在外面引用的也可以把这坨当成一个普通的input使用v-model进行操作，因垂死庭<img src="/images/emoticon/70.gif" alt="思考" style="display:inline; margin:0;"></p><p>查资料的时候发现遇到这个问题的小伙伴还不少，如果我把它开源了，是不是就能帮助到别人，至少是公司的小伙伴？兴奋～</p><p>say do let’s do, 先看下都有哪些需要设置成可配置的:</p><ul><li><code>class</code> 不同的风格可能有不同需求，</li><li><code>name</code> 在表单里可能会用到</li><li><code>default text</code> 默认显示的文本</li><li><code>options</code> 下拉菜单的主要数据list，每项包含value和text</li></ul><p>ok:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div :<span class="class"><span class="keyword">class</span></span>=<span class="string">"classList"</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">"hidden"</span> :name=<span class="string">"name"</span> v-model=<span class="string">"value"</span>&gt;</span><br><span class="line">        &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"dropdown icon"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"default text"</span>&gt;&#123;&#123; defaultText &#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div class="menu"&gt;</span></span><br><span class="line"><span class="regexp">            &lt;div class="item" v-for="(option, index) in list" :key="index"</span></span><br><span class="line"><span class="regexp">                 :data-value="option.value" :data-text="option.text"</span></span><br><span class="line"><span class="regexp">            &gt;&#123;&#123; option.text &#125;&#125;&lt;/</span>div&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    export default &#123;</span></span><br><span class="line"><span class="regexp">        props: &#123;</span></span><br><span class="line"><span class="regexp">            addClass: &#123;</span></span><br><span class="line"><span class="regexp">                type: String</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">            name: &#123;</span></span><br><span class="line"><span class="regexp">                type: String,</span></span><br><span class="line"><span class="regexp">                required: true</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">            value: &#123;</span></span><br><span class="line"><span class="regexp">                required: true</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">            defaultText: &#123;</span></span><br><span class="line"><span class="regexp">                required: true</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">            options: &#123;</span></span><br><span class="line"><span class="regexp">                required: true</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        computed: &#123;</span></span><br><span class="line"><span class="regexp">            classList: function() &#123;</span></span><br><span class="line"><span class="regexp">                return 'ui dropdown ' + this.addClass;</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure></p><p>然后是数据处理<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    initDropdown: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> self = <span class="keyword">this</span>,</span><br><span class="line">            settings = &#123;</span><br><span class="line">                action: <span class="string">'activate'</span>,</span><br><span class="line">                onChange: <span class="function"><span class="keyword">function</span>(<span class="params">value, text</span>)</span>&#123;</span><br><span class="line">                    self.$emit(<span class="string">'input'</span>, value)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        $(<span class="keyword">this</span>.$el).dropdown(settings)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后再把这个函数放到mounted()里，是不是超简单。不过既然要给别人用，还是要尽量满足多样化的需求，比如人家的<code>action</code>不是<code>activate</code>啦;人家的option的key叫id和text啦；dropdown()里有其他的操作啦</p><p>最后经过优化<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div :<span class="class"><span class="keyword">class</span></span>=<span class="string">"classList"</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">"hidden"</span> :name=<span class="string">"name"</span> v-model=<span class="string">"value"</span>&gt;</span><br><span class="line">        &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"dropdown icon"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"default text"</span>&gt;&#123;&#123; defaultText &#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div class="menu"&gt;</span></span><br><span class="line"><span class="regexp">            &lt;div class="item" v-for="(option, index) in list" :key="index"</span></span><br><span class="line"><span class="regexp">                 :data-value="option.value" :data-text="option.text"</span></span><br><span class="line"><span class="regexp">            &gt;&#123;&#123; option.text &#125;&#125;&lt;/</span>div&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    export default &#123;</span></span><br><span class="line"><span class="regexp">        props: &#123;</span></span><br><span class="line"><span class="regexp">            addClass: &#123;</span></span><br><span class="line"><span class="regexp">                type: String</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">            name: &#123;</span></span><br><span class="line"><span class="regexp">                type: String,</span></span><br><span class="line"><span class="regexp">                required: true</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">            value: &#123;</span></span><br><span class="line"><span class="regexp">                required: true</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">            defaultText: &#123;</span></span><br><span class="line"><span class="regexp">                required: true</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">            options: &#123;</span></span><br><span class="line"><span class="regexp">                required: true</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">            textFiled: &#123;</span></span><br><span class="line"><span class="regexp">                default: 'text'</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">            valueFiled: &#123;</span></span><br><span class="line"><span class="regexp">                default: 'value'</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">            action: &#123;</span></span><br><span class="line"><span class="regexp">                type: String,</span></span><br><span class="line"><span class="regexp">                default: 'activate'</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">            setting: &#123;</span></span><br><span class="line"><span class="regexp">                type: Object</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        mounted() &#123;</span></span><br><span class="line"><span class="regexp">            this.$nextTick(() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">                this.initDropdown()</span></span><br><span class="line"><span class="regexp">            &#125;)</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        updated() &#123;</span></span><br><span class="line"><span class="regexp">            this.$nextTick(() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">                this.initDropdown()</span></span><br><span class="line"><span class="regexp">            &#125;)</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        computed: &#123;</span></span><br><span class="line"><span class="regexp">            classList: function() &#123;</span></span><br><span class="line"><span class="regexp">                return 'ui dropdown ' + this.addClass;</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">            list: function() &#123;</span></span><br><span class="line"><span class="regexp">                if(!this.options) &#123;</span></span><br><span class="line"><span class="regexp">                    console.error('options is null')</span></span><br><span class="line"><span class="regexp">                &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">                return this.options.map((option) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">                    if(option.constructor === Object) &#123;</span></span><br><span class="line"><span class="regexp">                        return &#123;</span></span><br><span class="line"><span class="regexp">                            text: option[this.textFiled],</span></span><br><span class="line"><span class="regexp">                            value: option[this.valueFiled]</span></span><br><span class="line"><span class="regexp">                        &#125;</span></span><br><span class="line"><span class="regexp">                    &#125; else &#123;</span></span><br><span class="line"><span class="regexp">                        return &#123;</span></span><br><span class="line"><span class="regexp">                            text: option,</span></span><br><span class="line"><span class="regexp">                            value: option</span></span><br><span class="line"><span class="regexp">                        &#125;</span></span><br><span class="line"><span class="regexp">                    &#125;</span></span><br><span class="line"><span class="regexp">                &#125;)</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        methods: &#123;</span></span><br><span class="line"><span class="regexp">            initDropdown: function() &#123;</span></span><br><span class="line"><span class="regexp">                var self = this,</span></span><br><span class="line"><span class="regexp">                    settings = $.extend(&#123;</span></span><br><span class="line"><span class="regexp">                        action: this.action,</span></span><br><span class="line"><span class="regexp">                        onChange: function(value, text)&#123;</span></span><br><span class="line"><span class="regexp">                            self.$emit('input', value)</span></span><br><span class="line"><span class="regexp">                            /</span><span class="regexp">/ 传递选中的文本</span></span><br><span class="line"><span class="regexp">                            self.$emit('dropdown-selected', text)</span></span><br><span class="line"><span class="regexp">                        &#125;</span></span><br><span class="line"><span class="regexp">                    &#125;, this.setting)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">                $(this.$el).dropdown(settings)</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure></p><p>最后加上update()和this.$nextTick()双重保障以防value在刷新和重新渲染的时候出现异常</p><p>使用的时候import然后注册组件然后就可以这样使用咯<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;Dropdown addClass=<span class="string">"selection"</span> name=<span class="string">"selection"</span> defaultText=<span class="string">"请选择"</span></span><br><span class="line">          v-model=<span class="string">"selectedValue"</span> :options=<span class="string">"options"</span></span><br><span class="line">          textFiled=<span class="string">"value"</span> valueFiled=<span class="string">"id"</span></span><br><span class="line">          @dropdown-selected=<span class="string">"(text) =&gt; &#123; selectedText = text&#125;"</span></span><br><span class="line">&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Dropdown</span>&gt;</span></span></span><br><span class="line">&lt;span&gt;id: &#123;&#123; selectedValue &#125;&#125; name：&#123;&#123; selectedText &#125;&#125; &lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">...</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">data() &#123;</span></span><br><span class="line"><span class="regexp">return &#123;</span></span><br><span class="line"><span class="regexp">    options: [</span></span><br><span class="line"><span class="regexp">            &#123;</span></span><br><span class="line"><span class="regexp">                id: 'litteRed',</span></span><br><span class="line"><span class="regexp">                value: '小红'</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">            &#123;</span></span><br><span class="line"><span class="regexp">                id: 'litteBlue',</span></span><br><span class="line"><span class="regexp">                value: '小蓝'</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        ],</span></span><br><span class="line"><span class="regexp">        selectedValue: null,</span></span><br><span class="line"><span class="regexp">        selectedText: null,</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><p>详细可以装一个看看咯，包里面有例子的咯，<br><code>npm install vue-semantic-dropdown --save</code><br>求点赞哟</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将分两部分，上篇主要描述组件功能的开发，下篇将描述打包发布&lt;br&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="组件开发" scheme="http://yoursite.com/tags/%E7%BB%84%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>PC端&amp;移动端：canvas三种方式实现刮刮乐（下）</title>
    <link href="http://yoursite.com/2017/04/11/blog2017-04-11/"/>
    <id>http://yoursite.com/2017/04/11/blog2017-04-11/</id>
    <published>2017-04-11T11:12:05.000Z</published>
    <updated>2017-11-23T03:25:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>接 PC端&amp;移动端：canvas三种方式实现刮刮乐（上）<br><a id="more"></a></p><h3 id="JS部分"><a href="#JS部分" class="headerlink" title="JS部分"></a>JS部分</h3><p>因为我个人想多多练习使用对象，所有这块结构可能并不是最简便的写法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scratcher</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.init();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">scratcher.prototype = &#123;</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.canvas = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>);</span><br><span class="line">        <span class="keyword">this</span>.ctx = <span class="keyword">this</span>.canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>创建了各scratcher对象封装所有变量和方法，最后只需new一下实例就可以展示效果。init作为入口，首先把canvas和画布对象存储下来供后面的方法调用。</p><h4 id="涂层绘制"><a href="#涂层绘制" class="headerlink" title="涂层绘制"></a>涂层绘制</h4><p>接下来绘制刮刮乐的中奖图片上面的涂层，我使用的是最常见的灰色<code>#ccc</code>，绘制一个长方形，宽高和canvas相同这样正好全部盖中奖图。如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">draw: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.ctx.fillStyle = <span class="string">"#ccc"</span>;</span><br><span class="line">    <span class="keyword">this</span>.ctx.fillRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>别忘了把这个方法放到init中执行。</p><h4 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h4><p>然后写涂抹功能<code>scratchHandle</code>，这部分最后再说，先假设已经有一个<code>scratchHandle</code>。那么接下来我们将功能事件绑定到鼠标/触摸动作上去：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">bind: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.canvas.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        self.canvas.onmousemove = self.scratchHandle.bind(self);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.canvas.onmouseup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        self.canvas.onmousemove = <span class="literal">null</span>;</span><br><span class="line">        self.flag = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.canvas.addEventListener(<span class="string">'touchmove'</span>, self.scratchHandle.bind(self), <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.canvas.addEventListener(<span class="string">'touchend'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        self.canvas.removeEventListener(<span class="string">'touchmove'</span>, self.scratchHandle.bind(self), <span class="literal">false</span>);</span><br><span class="line">        self.flag = <span class="literal">true</span>;</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面两段绑定的鼠标动作，下面两段绑定的手指触摸动作，记得对应绑定也要解绑，不然就会一直涂抹下去。<br>bind事件也要加到init中。</p><p>关于<code>flag</code>接下来会提到。</p><h4 id="涂抹功能"><a href="#涂抹功能" class="headerlink" title="涂抹功能"></a>涂抹功能</h4><p>现在就只剩最核心的涂抹功能了，基本原理就是获得鼠标/触摸点的位置（相对canvas）,然后设置图形大小，将涂层抹没。</p><p>这里有三种方式，先看代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">scratchHandle: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>,</span><br><span class="line">        evt = e || <span class="built_in">window</span>.event,</span><br><span class="line">        canvas_location = <span class="keyword">this</span>.canvas.getBoundingClientRect(),</span><br><span class="line">        client_x = evt.clientX || evt.touches[<span class="number">0</span>].clientX,</span><br><span class="line">        client_y = evt.clientY || evt.touches[<span class="number">0</span>].clientY,</span><br><span class="line">        x = client_x - canvas_location.left,</span><br><span class="line">        y = client_y - canvas_location.top;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式一</span></span><br><span class="line">    <span class="comment">// ctx.clearRect(x-25, y-25, 50, 50);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式二</span></span><br><span class="line">    <span class="comment">// ctx.globalCompositeOperation = 'destination-out';</span></span><br><span class="line">    <span class="comment">// ctx.beginPath();</span></span><br><span class="line">    <span class="comment">// ctx.arc(x, y, 25, 0, Math.PI*2, false);</span></span><br><span class="line">    <span class="comment">// ctx.fillStyle = 'rgba(0, 0, 0, 1)';</span></span><br><span class="line">    <span class="comment">// ctx.fill();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式三</span></span><br><span class="line">    <span class="keyword">this</span>.ctx.globalCompositeOperation = <span class="string">'destination-out'</span>;</span><br><span class="line">    <span class="keyword">this</span>.ctx.lineWidth = <span class="number">40</span>;</span><br><span class="line">    <span class="keyword">this</span>.ctx.lineCap = <span class="string">"round"</span>;</span><br><span class="line">    <span class="keyword">this</span>.ctx.strokeStyle = <span class="string">'rgba(0, 0, 0, 1)'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.flag) &#123;</span><br><span class="line">        self.ctx.beginPath();</span><br><span class="line">        self.ctx.moveTo(x, y);</span><br><span class="line"></span><br><span class="line">        self.flag = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.ctx.lineTo(x, y);</span><br><span class="line">    <span class="keyword">this</span>.ctx.stroke();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>和常用的方法一样，用鼠标/触摸点所在位置的坐标减去canvas左上角左边即为鼠标/触摸点相对canvas的坐标。</p><p><strong> 获取canvas坐标 </strong><br>不同的是，canvas并不能像div之类的通过offset取坐标值，而需要通过<code>getBoundingClientRect()</code>去取</p><p><strong> 获取鼠标/触摸点坐标 </strong><br><code>evt.touches[0]</code>是对触摸点坐标值的获取</p><p><strong> 三种涂抹方式 </strong><br>第一种用的是clearRect方法，可以像橡皮擦一样擦除一定区域的图像，参数分别是橡皮擦的右上角坐标和宽高。缺点就是需要手动模拟中心点，而且形状只能是方形的，还原度不好。</p><p>第二种是在涂层上继续绘画，开始想的是设置颜色为透明色，显然只是这样是无法擦出的，后来查到<code>globalCompositeOperation</code>，这个属性作用是设置重叠区域的效果，有很多属性值可以选择，使用<code>destination-out</code>就可以将重叠区域“消除”。然后绘制圆形、填充即可。这种方式的明显缺点就是当鼠标移动快的时候会断开，不连续，看起来就是一堆小圆点点。</p><p>第三种是比较好的一种，同样是继续绘画，但画的是线。把线设置粗一些，边缘设置成圆角便可获得比较好的效果。为了然线条正常的连接/分开，需要一个<code>flag</code>标识当前是不是线的起始点，什么时候用<code>moveTo</code>什么时候用<code>lineTo</code>都需要在此区分。这也是上面出现<code>flag</code>的原因，另外需要<code>flag</code>有一个默认值，跟canvas一起声明即可。</p><p>所以最后的init长这样<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.canvas = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>);</span><br><span class="line">    <span class="keyword">this</span>.ctx = <span class="keyword">this</span>.canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line">    <span class="keyword">this</span>.flag = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.draw();</span><br><span class="line">    <span class="keyword">this</span>.bind();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>全部代码可以到文章开始提到的连接去看，再放一下把<a href="https://jsfiddle.net/miyalee/pt5f0Ljm/" target="_blank" rel="noopener">连接在此么么哒</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接 PC端&amp;amp;移动端：canvas三种方式实现刮刮乐（上）&lt;br&gt;
    
    </summary>
    
    
      <category term="canvas" scheme="http://yoursite.com/tags/canvas/"/>
    
      <category term="HTML5" scheme="http://yoursite.com/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>PC端&amp;移动端：canvas三种方式实现刮刮乐（上）</title>
    <link href="http://yoursite.com/2017/03/28/blog2017-03-28/"/>
    <id>http://yoursite.com/2017/03/28/blog2017-03-28/</id>
    <published>2017-03-28T15:53:56.000Z</published>
    <updated>2017-11-23T03:25:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>许久没记录了，最近忙着找工作焦头烂额，代码早就写好了一直没空笔记。</p><p>言归正传！今天说一说canvas，值得开心的是终于知道自己还是对图像处理，动画制作，数据可视化更感兴趣！之后会再研究多一些，比如SVG啦，WebGL，D3，three.js，etc～</p><p>做这个刮刮乐的时候也找了些资料，先把代码效果给出来：<a href="https://jsfiddle.net/miyalee/pt5f0Ljm/" target="_blank" rel="noopener">查看效果</a> 就是模仿那种纸片，带有涂层，刮开显示中奖否的效果，在外卖啊支付宝啊经常见，所以自己也试着做个。<br><a id="more"></a></p><h3 id="html和css部分"><a href="#html和css部分" class="headerlink" title="html和css部分"></a>html和css部分</h3><p>首先创建一个500x100的div用来包裹涂层和涂层下面的图片:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"scratcher"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"prize.jpg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">class</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"500px"</span> <span class="attr">height</span>=<span class="string">"150px"</span> <span class="attr">id</span>=<span class="string">"canvas"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>图片一般选的都不是正好这么大，所有给父级div一个<code>overflow: hidden</code>，再将图片定位调整下就可以咯。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.scratcher</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/*以上这些用于将整个canvas在页面正中间也就是垂直水平居中*/</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.img</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.canvas</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>因为canvas和父级div宽高相同，我的书写习惯又是不喜欢行内css，所有开始我是这么写的<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.scratcher</span>,</span><br><span class="line"><span class="selector-class">.canvas</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>貌似没什么区别，但是！但是！<br>后面test的时候先在涂层上画了个正方形，发现却不是正方形！长宽明显不一样！整个canvas边沿也很模糊，好像被拉伸的样子！检查了n次代码！戳了n次自己的眼睛！就是不对！<img src="/images/emoticon/82.gif" alt="捅刀!" style="display:inline; margin:0;"></p><p>最后把代码还原到最原始形态，包括canvas宽高放回了行内，发现好了！试了几次果然是因为这两个属性！妈卖批为毛！有什么区别！查了资料，才得知</p><p><div class="tip">canvas的默认宽高为300px * 150px，在css中为canvas定义宽高，实际上是把宽高为300px * 150px的画布进行了拉伸。</div><br>这样画布就会失真，并且里面画的东西也会变形，所以画布的尺寸还是在canvas行内设置</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;许久没记录了，最近忙着找工作焦头烂额，代码早就写好了一直没空笔记。&lt;/p&gt;
&lt;p&gt;言归正传！今天说一说canvas，值得开心的是终于知道自己还是对图像处理，动画制作，数据可视化更感兴趣！之后会再研究多一些，比如SVG啦，WebGL，D3，three.js，etc～&lt;/p&gt;
&lt;p&gt;做这个刮刮乐的时候也找了些资料，先把代码效果给出来：&lt;a href=&quot;https://jsfiddle.net/miyalee/pt5f0Ljm/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;查看效果&lt;/a&gt; 就是模仿那种纸片，带有涂层，刮开显示中奖否的效果，在外卖啊支付宝啊经常见，所以自己也试着做个。&lt;br&gt;
    
    </summary>
    
    
      <category term="canvas" scheme="http://yoursite.com/tags/canvas/"/>
    
      <category term="HTML5" scheme="http://yoursite.com/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>纯css做一个摇头晃脑的长脸黄毛程序员</title>
    <link href="http://yoursite.com/2017/02/15/blog2017-02-15/"/>
    <id>http://yoursite.com/2017/02/15/blog2017-02-15/</id>
    <published>2017-02-15T06:41:53.000Z</published>
    <updated>2017-11-23T03:25:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>好久不见不造大家情人节狗粮吃的开心吗～最近关注css动画比较多，那天再codepen上看到一些不错的小作品，好可爱的<img src="/images/emoticon/57.gif" alt="水灵灵眼!" style="display:inline; margin:0;">，于是就决定自己也要画一个！对css动画不是很熟练就挑了个看起来比较好画的！<a href="http://codepen.io/aakashrodrigues/pen/Gfhjw" target="_blank" rel="noopener">链接在此</a><br><a id="more"></a><br>准备开始敲之前先分析了一下他的结构，主要分四部分：</p><ul><li>背景</li><li>身体</li><li>摇动的头</li><li>飘动的音符</li></ul><p>首先要把元素出现的位置定为在页面正中间，给body，html<code>width</code>,<code>height</code>都设置为<code>100%</code>填满页面，<code>margin: 0</code>不留边隙，然后<code>diplay： table</code>，<code>text-aligin： center</code>，这样再给子级div设置<code>display: table-cell</code>,<code>vertical-align: middle</code>大家都像table一样显示咯，子级div和它里面的内容都能垂直居中啦</p><h4 id="背景和身体"><a href="#背景和身体" class="headerlink" title="背景和身体"></a>背景和身体</h4><p>背景是一个灰蓝色的园，两边各有一道光影，仔细看的话会发现身体是在光影那两个层中间，这也符合光的原理嘛～</p><p>所以其实身体和背景其实是一起画的。<br>背景很简单，一个带宽高的div，给<code>border-radius： 50%</code>即可。两道光分别用before和after伪类来制作再合适不过，同样矩形div，调整出一个合适的倾斜角度，只留一点在背景圆内，背景圆来个<code>overflow: hidden</code>就可以了。慢工出细活，调整大小和角度是需要很大的耐心的。</p><p>哦还有位置，给背景圆相对定位，里面的内容绝对定位。调出合适的<code>top，left</code>等的值。这个也是要慢慢调的，表急。<br><img src="/images/background-cirle.png" alt="background-cirle"></p><p>然后就是body了，body也是个圆角矩形，上半部分在圆内，body里还有三个span放单词：<br><img src="/images/body.png" alt="body"><br><code>overflow: hidden</code>起了大作用哇～<br><img src="/images/body-hidden.png" alt="body-hidden"></p><h4 id="头"><a href="#头" class="headerlink" title="头"></a>头</h4><p>先不管它们的动画，先将形体展示出来。这个头比较复杂，我们慢慢切割<img src="/images/emoticon/81.gif" alt="捅刀!" style="display:inline; margin:0;">。</p><p>仔细观察了一番，最困扰的就是应该就是鬓角了，一开始我认为头发是一个整体，耳朵和鬓角是一个整体，脸是一个整体。可是这样切完我发现不对啊，脸明显多出来一圈，不可能把这一圈单独画吧。沿着脸分我才发现，脸上是两片的！</p><p>怎么感觉有点恐怖。。。也就是说脸是两大部分的，因为颜色一样，所以可以营造出一种一块的感觉。按层分的话，应该先是然后是大脸，然后上面又盖了一层比脸小一圈的小半圆用来放眼睛眉毛，小脸和大脸的差值就是鬓角的出现位置。这也能解释额头那一撮毛是怎么来的了</p><p>只是这样说肯定还是迷迷糊糊的，上图：<br><img src="/images/face.png" alt="face"><br>因为后面要做出摇头的动作，所以head这个div要包含其中所以元素，并且不能被背景<code>overflow：hidden</code>这个遮住。所以头单独拿出来用absolute居中定位到body的上面。</p><p>头发可以做高一点,出了头顶。最上面那撮也是圆角矩形，只不过只有右边的角是圆的，小脸上面那撮也是一样的道理，耳朵也是。这些把位置调好就ok,充分利用<code>left: 0</code>,<code>top: 0</code>,<code>bottom: 0</code>,<code>right: 0</code>等方便定位。</p><p>其他眼睛眉毛都好画，利用好圆角矩形和伪类即可。注意如果将眼睛眉毛作为一个整体的画，一定用眼下方的阴影做父级元素，虽然感觉很非人类，但是如果不这样的话，后面眼睛和眉毛的动画就会互相影响。</p><p>脸上的阴影是一个半透明层定位在左半脸，鼻子其实是这块阴影上的一块颜色为肤色的div<br><img src="/images/head.png" alt="head"></p><h4 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h4><p>字符不需要画，有这种字体符号，简单调整下位置，一个在顶部一个在半中央。这个的复杂部分是在后面动画的部分<br><img src="/images/static-person.png" alt="static-person"></p><h4 id="动画-摇头"><a href="#动画-摇头" class="headerlink" title="动画 摇头"></a>动画 摇头</h4><p>大概是我对动画不太熟悉，感觉这里面每一个动画都很不简单，不是简单伸缩移动一下就可以。</p><p>在这个实验里，使动画灵动起来的除了使用了不同动画函数，就是这个<code>alternate</code>属性，它是animation的一个属性，表示动画会反方向运动，配合<code>infinite</code>持续运动这个属性，能够省略很多动画的代码。</p><p>比如一个物体向先左运行，在向右运行，加上反方向属性它就会在向左向右以后再向右向左，最终营造出一种左左右右的感觉。就像这个头一样，动画里只需向左再向右再回到原点即可<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">keyframes</span> head-shake &#123;</span><br><span class="line">    0% &#123; <span class="attribute">transform</span>: <span class="built_in">rotate</span>(0deg); &#125;</span><br><span class="line">    33% &#123; <span class="attribute">transform</span>: <span class="built_in">rotate</span>(5deg); &#125;</span><br><span class="line">    66% &#123; <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-5deg); &#125;</span><br><span class="line">    100% &#123; <span class="attribute">transform</span>: <span class="built_in">rotate</span>(0deg); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里还是一个重要的属性，一开始做好这个动画是这样的：<br><img src="/images/person_draw.gif" alt="head-shake"><br>怎么感觉我这个人头摇的这么二逼呢<img src="/images/emoticon/64.gif" alt="摸下巴" style="display:inline; margin:0;"><br>仔细分析了下差别，发现人家的头是像不倒翁一样的摇，下巴是不动的。。。这是啥黑科技，一查，css还真有这属性<code>transform-origin</code>可以设置类似重心的位置，设置成bottom就正常了！学习了</p><h4 id="动画-挑眉"><a href="#动画-挑眉" class="headerlink" title="动画 挑眉"></a>动画 挑眉</h4><p>这个动作的重点在于它是几秒挑一次眉，挑眉的过程比等待的过程短很多，一开始我想用delay，但发现delay只能在第一次挑眉之前等待。</p><p>研究了一下发现其实动作并没有被推迟什么的，只是在动画中大部分时间让它处于静止，结合<code>alternate</code>看上去就像停了会才动了<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">keyframes</span> eyebrow-shake &#123;</span><br><span class="line">    0% &#123; <span class="attribute">transform</span>: <span class="built_in">translateY</span>(0) <span class="built_in">rotate</span>(15deg); &#125;</span><br><span class="line">    80% &#123; <span class="attribute">transform</span>: <span class="built_in">translateY</span>(0) <span class="built_in">rotate</span>(15deg); &#125;</span><br><span class="line">    100% &#123; <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-10px) <span class="built_in">rotate</span>(15deg); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>眉毛还是歪的</p><h4 id="动画-眨眼"><a href="#动画-眨眼" class="headerlink" title="动画 眨眼"></a>动画 眨眼</h4><p>知道了挑眉，那么眨眼也是一样了，向Y轴方向缩小到没有，看起来就像闭上了眼<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">keyframes</span> eye-blink &#123;</span><br><span class="line">    0% &#123; <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(1); &#125;</span><br><span class="line">    80% &#123; <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(1); &#125;</span><br><span class="line">    100% &#123; <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(0); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="动画-音符飘动"><a href="#动画-音符飘动" class="headerlink" title="动画 音符飘动"></a>动画 音符飘动</h4><p>两个音符用的同一个动画，右边比左边推迟2s运动。都是先想左，再向右上，再左上，顺便倾斜。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">keyframes</span> music-motion &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    40% &#123;</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-30px) <span class="built_in">rotate</span>(15deg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    80% &#123;</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(0) <span class="built_in">translateY</span>(-150px) <span class="built_in">rotate</span>(-15deg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    100% &#123;</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-30px) <span class="built_in">translateY</span>(-200px) <span class="built_in">rotate</span>(15deg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>选哪种动画也很重要，ease和ease-in效果就差很多，linear和ease也大不相同，这方面总感觉很难言传，只能考练习得到那种一眼看穿的能力。</p><p><a href="https://jsfiddle.net/miyalee/nf867ssp/" target="_blank" rel="noopener">最终效果</a>，还原度还行吧，诶嘿嘿</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好久不见不造大家情人节狗粮吃的开心吗～最近关注css动画比较多，那天再codepen上看到一些不错的小作品，好可爱的&lt;img src=&quot;/images/emoticon/57.gif&quot; alt=&quot;水灵灵眼!&quot; style=&quot;display:inline; margin:0;&quot;&gt;，于是就决定自己也要画一个！对css动画不是很熟练就挑了个看起来比较好画的！&lt;a href=&quot;http://codepen.io/aakashrodrigues/pen/Gfhjw&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;链接在此&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="css3动画" scheme="http://yoursite.com/tags/css3%E5%8A%A8%E7%94%BB/"/>
    
      <category term="tansfrom" scheme="http://yoursite.com/tags/tansfrom/"/>
    
      <category term="animation" scheme="http://yoursite.com/tags/animation/"/>
    
  </entry>
  
  <entry>
    <title>在多地点使用hexo更新博客</title>
    <link href="http://yoursite.com/2017/02/06/blog2017-02-06/"/>
    <id>http://yoursite.com/2017/02/06/blog2017-02-06/</id>
    <published>2017-02-06T06:23:41.000Z</published>
    <updated>2017-11-23T03:25:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用hexo后生活变得美好多了！但马上遇到了一个问题，东西写到一半要回家了怎么办？在家想接着写？或者在家写好的到公司或者哪里想修改？</p><p>第一个想到方法就是随身携带优盘，拷过来，拷过去。感觉好蠢。。。开个git仓库存储是一个好方法，不过这里介绍的是更简便更人性的另一种方式<br><a id="more"></a><br>其实很简单，<strong>在你git page对应那个仓库新建一个分支</strong>，比如叫hexo，把你博客文件pull上去就可以了！<strong>master存deploy的内容，hexo存文件信息</strong>，互不干扰！</p><p>不过如果你有主题文件<code>theme</code>的话，上传的时候会遇到子模块的问题，我所知的简便的解决方式有两种：</p><ul><li>一种是只上传source的内容，到另一台计算机上的时候重新<code>hexo init</code>，再把文件内容覆盖过去。缺点就是主题和配置文件等修妖自己再捣鼓一遍</li><li>另一种也是我现在使用的，之所以遇到子模块是因为为了主题的更新，theme文件是作为一个git库存在，如果主题作者更新了内容，只需要再库里<code>git pull</code>就可以。想要作为一个文件上传的话<strong>只需要把<code>.git</code>删掉</strong>就可以顺利上传了</li></ul><p>恩就酱～<img src="/images/emoticon/78.gif" alt="yes!" style="display:inline; margin:0;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用hexo后生活变得美好多了！但马上遇到了一个问题，东西写到一半要回家了怎么办？在家想接着写？或者在家写好的到公司或者哪里想修改？&lt;/p&gt;
&lt;p&gt;第一个想到方法就是随身携带优盘，拷过来，拷过去。感觉好蠢。。。开个git仓库存储是一个好方法，不过这里介绍的是更简便更人性的另一种方式&lt;br&gt;
    
    </summary>
    
    
      <category term="博客存储" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2%E5%AD%98%E5%82%A8/"/>
    
      <category term="共享" scheme="http://yoursite.com/tags/%E5%85%B1%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>OCR——关于身份证照片的信息识别</title>
    <link href="http://yoursite.com/2017/02/03/blog2017-02-03/"/>
    <id>http://yoursite.com/2017/02/03/blog2017-02-03/</id>
    <published>2017-02-03T08:04:07.000Z</published>
    <updated>2017-11-23T08:03:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>这个坑是在工作中挖的，项目中突然有一个身份证识别的需求，主要功能是用户上传自己的身份证，我们提取身份证中的姓名，id等等做一个记录。虽说这个现在已经交给后端处理了，但还是很好奇啊有木有！感觉是个很吊的功能有木有～这种识别还有自己的统称<a href="https://en.wikipedia.org/wiki/Optical_character_recognition" target="_blank" rel="noopener">OCR</a>，厉害厉害<img src="/images/emoticon/43.gif" alt="推眼镜" style="display:inline; margin:0;"><br><a id="more"></a></p><h4 id="实现信息识别的几种方式"><a href="#实现信息识别的几种方式" class="headerlink" title="实现信息识别的几种方式"></a>实现信息识别的几种方式</h4><p>查了半天资料，前端后端倒是都有插件可以引用，前端有一个<a href="https://github.com/antimatter15/ocrad.js" target="_blank" rel="noopener">ocrad.js</a>，借助一些图像蜕化的工具便可提高成功率！<br>不过识别身份证的效果还是差强人意，可以说它也就能识别个纯白底纯黑字清晰度还要比较高的图片里的文字<img src="/images/emoticon/72.gif" alt="崩溃" style="display:inline; margin:0;"></p><p>在某探讨里看到某大神说到百度的<a href="http://ai.baidu.com/tech/ocr/general" target="_blank" rel="noopener">文字识别</a>服务，官网上就能试一试，赶紧把自己搞到那张模糊的身份证照片上传上去试了下（现在搞张能做实验的身份证照片也不容易啊！<img src="/images/emoticon/82.gif" alt="戳刀" style="display:inline; margin:0;">）</p><p><img src="/images/idcard_test_result.jpg" alt="身份证识别测试结果"></p><p>然后发现效果惊人啊！不亏是百度大厂！好羡慕，好想要～</p><h4 id="获取access-token"><a href="#获取access-token" class="headerlink" title="获取access_token"></a>获取<code>access_token</code></h4><p>果断申请了个key，创建了个应用，然后发现还不够啊<img src="/images/emoticon/70.gif" alt="思考" style="display:inline; margin:0;">，还得<a href="http://ai.baidu.com/docs" target="_blank" rel="noopener">鉴权认证</a>，真是麻烦。<br>不过鉴权认证也好弄，按照api给的授权服务地址<code>https://aip.baidubce.com/oauth/2.0/token</code>发一个post请求，url带上参数：</p><ul><li>grant_type: 必须参数，固定为“client_credentials”；</li><li>client_id: 必须参数，应用的API Key；</li><li>client_secret: 必须参数，应用的Secret Key；</li></ul><p>那俩key就是你创建应用的key，示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">https://aip.baidubce.com/oauth/2.0/token?</span><br><span class="line">   grant_type=client_credentials&amp;</span><br><span class="line">   client_id=Va5yQRHlA4Fq4eR3LT0vuXV4&amp;</span><br><span class="line">   client_secret= 0rDSjzQ20XUj5itV7WRtznPQSzr5pVw2&amp;</span><br></pre></td></tr></table></figure><p>调用成功后会返回你个<code>access_token //调用接口时要用相当于你的唯一id</code>，<code>expires_in //Access Token有效期</code>，其他的爱啥啥。</p><p>我当时是在本地试的遇到了跨域问题，如果你也是控制台报<code>XMLHttpRequest cannot load http://google.com/. No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource. Origin &#39;http://run.jsbin.io&#39; is therefore not allowed access.</code></p><p>那就是人家百度那边不允许你跨域请求了，解决办法很简单，再你的ajax里加一个<code>dataType : jsonp</code>就可以用jsonp跨域啦~不过！<div class="tip">由于jsonp的机制它会把参数放到url里传递</div><br>后面我就被这给坑了妈蛋<img src="/images/emoticon/58.gif" alt="躺血" style="display:inline; margin:0;"></p><h4 id="调用识别接口"><a href="#调用识别接口" class="headerlink" title="调用识别接口"></a>调用识别接口</h4><p>得到<code>access_token</code>就可以去调用接口啦<br><img src="/images/api_describe.png" alt="接口描述"><br>按照文档中的接口描述，我们可以像刚才一样吧<code>access_token</code>放url中，请求类型也可以直接设置。body中参数有两个，一个是<code>image</code>，表示图像base64编码；另一个是<code>id_card_side</code>，代表身份证的正反面。那么问题来了，如何获取一张图片的base64编码？</p><p>这时候就要用到canvas了，canvas有一个toDataURL方法可以输出图像的信息，其中就有图像的base64编码。那么现在我们只要将获取到图片画在canvas中就可以了。借助fileReader可以简便的得到图片的src。代码如下：<br>bardu_ocr_test.html:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">title</span>&gt;</span>文字识别测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">               body &#123;</span></span><br><span class="line"><span class="undefined">                   font-family: 'sourcesanspro', 'Helvetica Neue', Arial, sans-serif;</span></span><br><span class="line"><span class="undefined">                   padding: 15px;</span></span><br><span class="line"><span class="undefined">               &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">               input &#123;</span></span><br><span class="line"><span class="undefined">                   display: block;</span></span><br><span class="line"><span class="undefined">                   margin-bottom: 15px;</span></span><br><span class="line"><span class="undefined">               &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">               .image &#123;</span></span><br><span class="line"><span class="undefined">                   border: 1px solid #000;</span></span><br><span class="line"><span class="undefined">               &#125;</span></span><br><span class="line"><span class="undefined">       </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"file"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">class</span>=<span class="string">"image"</span> <span class="attr">id</span>=<span class="string">"image"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://cdn.bootcss.com/jquery/1.11.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"baidu_ocr_test.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>baidu_ocr_test.js：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> file = $(<span class="string">'#file'</span>);</span><br><span class="line"></span><br><span class="line">    file.on(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> img_file_data = $(<span class="keyword">this</span>)[<span class="number">0</span>].files[<span class="number">0</span>],</span><br><span class="line">            fileReader = <span class="keyword">new</span> FileReader();</span><br><span class="line"></span><br><span class="line">        fileReader.readAsDataURL(img_file_data);</span><br><span class="line">        fileReader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> image_src = event.target.result,</span><br><span class="line">                image_obj = <span class="keyword">new</span> Image(),</span><br><span class="line">                image_el = <span class="built_in">document</span>.getElementById(<span class="string">'image'</span>),</span><br><span class="line">                context = image_el.getContext(<span class="string">'2d'</span>),</span><br><span class="line">                dataURL, image_base64;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//上传图片预览</span></span><br><span class="line">            image_obj.src = image_src;</span><br><span class="line">            image_el.width = image_obj.width;</span><br><span class="line">            image_el.height = image_obj.height;</span><br><span class="line">            context.drawImage(image_obj, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取图片base64格式</span></span><br><span class="line">            dataURL = image_el.toDataURL(<span class="string">'image/png'</span>);</span><br><span class="line">            image_base64 = dataURL.substring(dataURL.indexOf(<span class="string">'4'</span>) + <span class="number">2</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(image_base64, dataURL);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>字符串截取的有些粗糙，直接取的base64的4，呵呵～<br><code>image_base64</code>就是我们想要的数据了，发送的时候仍然遇到了跨域问题，想还用jsonp解决的我发现不行了。。。请求都发不出去，显示414<code>Request-URI Too Long</code><img src="/images/emoticon/48.gif" alt="笑哭" style="display:inline; margin:0;">，前面说了jsonp会把参数放到url里，一个图片的base64编码辣么长，request url的长度也是有上限的。。。</p><h4 id="使用nodejs解决跨域问题"><a href="#使用nodejs解决跨域问题" class="headerlink" title="使用nodejs解决跨域问题"></a>使用nodejs解决跨域问题</h4><p>辣怎么办，据说放到后端处理可以避免跨域的问题，恩。。。后端，前端的后端，非nodejs莫属了！</p><p>大体思路就是前端把数据发到node，node处理下发到baidu，拿到返回值再返回给前端，感觉绕了个大圈。。。没办法，确实安全，url都不会暴露。</p><p>和js不一样，node要中规中矩的把json解析然后处理成string然后发出。server.js:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>); <span class="comment">//用来处理json数据 类似js里的JSON</span></span><br><span class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> request_body = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 允许跨域</span></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'*'</span>);</span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Allow-Methods'</span>, <span class="string">'GET, POST, OPTIONS, PUT, PATCH, DELETE'</span>);</span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Allow-Headers'</span>, <span class="string">'X-Requested-With,content-type'</span>);</span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Allow-Credentials'</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取数据</span></span><br><span class="line">    req.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">        request_body += chunk;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送请求并获取返回值</span></span><br><span class="line">    req.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//设置返回到前端的数据类型为json</span></span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'application/json; charset=utf8'</span>&#125;);</span><br><span class="line"></span><br><span class="line">        request_body = querystring.parse(request_body);</span><br><span class="line">        <span class="built_in">console</span>.log(request_body);</span><br><span class="line"></span><br><span class="line">        request(&#123;</span><br><span class="line">            url: <span class="string">'https://aip.baidubce.com/rest/2.0/ocr/v1/idcard?access_token=24.*************************************************9226013'</span>,</span><br><span class="line">            method: <span class="string">"POST"</span>,</span><br><span class="line">            json: <span class="literal">true</span>,</span><br><span class="line">            headers: &#123;</span><br><span class="line">                <span class="string">"content-type"</span>: <span class="string">"application/x-www-form-urlencoded"</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            body: querystring.stringify(request_body)</span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error, response, body</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!error &amp;&amp; response.statusCode === <span class="number">200</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//返回识别结果</span></span><br><span class="line">                <span class="built_in">console</span>.log(body);</span><br><span class="line">                res.end(<span class="built_in">JSON</span>.stringify(body));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"error: "</span> + error);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;).listen(<span class="number">8888</span>); <span class="comment">//我使用的8888吉利端口～</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'running'</span>);</span><br></pre></td></tr></table></figure></p><p>baidu_ocr_test.js(只是ajax部分):<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">       type:<span class="string">'POST'</span>,</span><br><span class="line">       url: <span class="string">'http://127.0.0.1:8888/'</span>,</span><br><span class="line">       data: &#123;</span><br><span class="line">           image: image_base64,</span><br><span class="line">           id_card_side: <span class="string">'front'</span></span><br><span class="line">       &#125;,</span><br><span class="line">       success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(data);</span><br><span class="line">       &#125;,</span><br><span class="line">       error: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">'fail'</span>);</span><br><span class="line">       &#125;,</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure></p><p>在命令行<code>$ node server.js</code>把node服务跑起来再去浏览器打开html就可以调试了。成功的话能返回类似这样的json:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123; log_id: 2986164963,</span><br><span class="line"> words_result:</span><br><span class="line">  &#123; &apos;住址&apos;: &#123; location: [Object], words: &apos;北京市海淀区西北旺东路100号中关村科技园&apos; &#125;,</span><br><span class="line">    &apos;公民身份号码&apos;: &#123; location: [Object], words: &apos;370782198709170246&apos; &#125;,</span><br><span class="line">    &apos;出生&apos;: &#123; location: [Object], words: &apos;19870917&apos; &#125;,</span><br><span class="line">    &apos;姓名&apos;: &#123; location: [Object], words: &apos;小静&apos; &#125;,</span><br><span class="line">    &apos;性别&apos;: &#123; location: [Object], words: &apos;女&apos; &#125;,</span><br><span class="line">    &apos;民族&apos;: &#123; location: [Object], words: &apos;汉&apos; &#125; &#125;,</span><br><span class="line"> words_result_num: 6 &#125;</span><br></pre></td></tr></table></figure></p><p>基本上这个功能就差不多啦，百度大厂的技术文档非常详细，错误信息的格式和解释也很准确，还能能够甄别是否有这个人，企业和个人都可以用用！</p><h4 id="展示识别结果"><a href="#展示识别结果" class="headerlink" title="展示识别结果"></a>展示识别结果</h4><p>前端肯定不能让数据躺在控制台，所以就写了点dom操作让数据显示在照片下面了，效果如图：<br><img src="/images/ocr.gif" alt="最终效果"><br>完整代码(代码都不多都写一起了没有封装啥的随便看看)：<br>bardu_ocr_test.html：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>文字识别测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">            body &#123;</span></span><br><span class="line"><span class="undefined">                font-family: 'sourcesanspro', 'Helvetica Neue', Arial, sans-serif;</span></span><br><span class="line"><span class="undefined">                padding: 15px;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            input &#123;</span></span><br><span class="line"><span class="undefined">                display: block;</span></span><br><span class="line"><span class="undefined">                margin-bottom: 15px;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            .image &#123;</span></span><br><span class="line"><span class="undefined">                border: 1px solid #000;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            ul li &#123;</span></span><br><span class="line"><span class="undefined">                list-style: none;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"file"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">class</span>=<span class="string">"image"</span> <span class="attr">id</span>=<span class="string">"image"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"result"</span> <span class="attr">id</span>=<span class="string">"result"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h4</span>&gt;</span>识别结果：<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://cdn.bootcss.com/jquery/1.11.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"baidu_ocr_test.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>baidu_ocr_test.js：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> file = $(<span class="string">'#file'</span>),</span><br><span class="line">        result = $(<span class="string">'#result'</span>);</span><br><span class="line"></span><br><span class="line">    file.on(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> img_file_data = $(<span class="keyword">this</span>)[<span class="number">0</span>].files[<span class="number">0</span>],</span><br><span class="line">            fileReader = <span class="keyword">new</span> FileReader();</span><br><span class="line"></span><br><span class="line">        fileReader.readAsDataURL(img_file_data);</span><br><span class="line">        fileReader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> image_src = event.target.result,</span><br><span class="line">                image_obj = <span class="keyword">new</span> Image(),</span><br><span class="line">                image_el = <span class="built_in">document</span>.getElementById(<span class="string">'image'</span>),</span><br><span class="line">                context = image_el.getContext(<span class="string">'2d'</span>),</span><br><span class="line">                dataURL, image_base64;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//上传图片预览</span></span><br><span class="line">            image_obj.src = image_src;</span><br><span class="line">            image_el.width = image_obj.width;</span><br><span class="line">            image_el.height = image_obj.height;</span><br><span class="line">            context.drawImage(image_obj, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//图片转为base64格式</span></span><br><span class="line">            dataURL = image_el.toDataURL(<span class="string">'image/png'</span>);</span><br><span class="line">            image_base64 = dataURL.substring(dataURL.indexOf(<span class="string">'4'</span>) + <span class="number">2</span>);</span><br><span class="line">            <span class="comment">// console.log(image_base64, dataURL);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//发送至后端 获取识别结果</span></span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                type:<span class="string">'POST'</span>,</span><br><span class="line">                url: <span class="string">'http://127.0.0.1:8888/'</span>,</span><br><span class="line">                data: &#123;</span><br><span class="line">                    image: image_base64,</span><br><span class="line">                    id_card_side: <span class="string">'front'</span></span><br><span class="line">                &#125;,</span><br><span class="line">                success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">                    <span class="comment">// console.log(data);</span></span><br><span class="line">                    <span class="comment">//显示识别结果</span></span><br><span class="line">                    <span class="keyword">var</span> el = <span class="string">'&lt;ul&gt;'</span>;</span><br><span class="line"></span><br><span class="line">                    $.each(data.words_result, <span class="function"><span class="keyword">function</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">                        el += <span class="string">'&lt;li&gt;'</span>+ index + <span class="string">' : '</span> + data.words_result[index].words + <span class="string">'&lt;/li&gt;'</span>;</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">                    el += <span class="string">'&lt;/ul&gt;'</span>;</span><br><span class="line">                    result.append($(el));</span><br><span class="line">                &#125;,</span><br><span class="line">                error: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'fail'</span>);</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>server.js：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> request_body = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 允许跨域</span></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'*'</span>);</span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Allow-Methods'</span>, <span class="string">'GET, POST, OPTIONS, PUT, PATCH, DELETE'</span>);</span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Allow-Headers'</span>, <span class="string">'X-Requested-With,content-type'</span>);</span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Allow-Credentials'</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取数据</span></span><br><span class="line">    req.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">        request_body += chunk;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送请求并获取返回值</span></span><br><span class="line">    req.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'application/json; charset=utf8'</span>&#125;);</span><br><span class="line"></span><br><span class="line">        request_body = querystring.parse(request_body);</span><br><span class="line">        <span class="built_in">console</span>.log(querystring.stringify(request_body));</span><br><span class="line"></span><br><span class="line">        request(&#123;</span><br><span class="line">            url: <span class="string">'https://aip.baidubce.com/rest/2.0/ocr/v1/idcard?access_token=24.7067***************************************9226013'</span>,</span><br><span class="line">            method: <span class="string">"POST"</span>,</span><br><span class="line">            json: <span class="literal">true</span>,</span><br><span class="line">            headers: &#123;</span><br><span class="line">                <span class="string">"content-type"</span>: <span class="string">"application/x-www-form-urlencoded"</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            body: querystring.stringify(request_body)</span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error, response, body</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!error &amp;&amp; response.statusCode === <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(body);</span><br><span class="line">                res.end(<span class="built_in">JSON</span>.stringify(body));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"error: "</span> + error);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;).listen(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'running'</span>);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个坑是在工作中挖的，项目中突然有一个身份证识别的需求，主要功能是用户上传自己的身份证，我们提取身份证中的姓名，id等等做一个记录。虽说这个现在已经交给后端处理了，但还是很好奇啊有木有！感觉是个很吊的功能有木有～这种识别还有自己的统称&lt;a href=&quot;https://en.wikipedia.org/wiki/Optical_character_recognition&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;OCR&lt;/a&gt;，厉害厉害&lt;img src=&quot;/images/emoticon/43.gif&quot; alt=&quot;推眼镜&quot; style=&quot;display:inline; margin:0;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="OCR" scheme="http://yoursite.com/tags/OCR/"/>
    
      <category term="文字识别" scheme="http://yoursite.com/tags/%E6%96%87%E5%AD%97%E8%AF%86%E5%88%AB/"/>
    
      <category term="百度api" scheme="http://yoursite.com/tags/%E7%99%BE%E5%BA%A6api/"/>
    
  </entry>
  
  <entry>
    <title>关于matrix3D</title>
    <link href="http://yoursite.com/2017/01/19/blog2017-1-19/"/>
    <id>http://yoursite.com/2017/01/19/blog2017-1-19/</id>
    <published>2017-01-19T07:33:47.000Z</published>
    <updated>2017-11-23T03:25:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间做了个主要功能是获取数据，然后更改并提交的表单。数据量比较大，请求时间大概1秒左右，为了获得更好的体验在请求的时候做了个loading的动效。研究过程中好奇心发作吧matrix和matrix3D撸了一遍<img src="/images/emoticon/79.gif" alt="给你黄瓜" style="display:inline; margin:0;"><br><a id="more"></a><br>这是当时的<a href="https://jsfiddle.net/miyalee/y5h6p86d/" target="_blank" rel="noopener">loading</a><br>不过这个并不是最初版，这个动效的设计和代码都是参考了这个<a href="http://bouncejs.com/" target="_blank" rel="noopener">框架</a>，我分析它的代码的时候发现它用的matrix3D（应该是为了方便生成各种动效）。但是我的动效并没有任何3D相关动作，用那一堆代码简直又臭又长，必须减肥，没得商量。</p><p>话说这么说，但是我一菜逼平时没怎么玩过3D动画，对martix3D更是不了解，于是义无反顾的掉进这个坑。</p><p>我知道matrix是2D变换，但是要想知道如何用matrix替换matrix3D就要知道这两个函数里面每个参数的含义</p><h4 id="matrix"><a href="#matrix" class="headerlink" title="matrix()"></a>matrix()</h4><p>首先看matrix，即</p><p><div class="tip">matrix(a, b, c, d, e, f)</div><br>对应到矩阵就是：<br><img src="/images/2d-matrix.gif" alt="2d-matrix"><br><img src="/images/2d-operation.jpg" alt="2d-operation"><br>即<code>ax+cy+e</code>为x的坐标，<code>bx+dy+f</code>为y的坐标，其他不用管</p><p>所以做2d移动时设置<code>e,f</code>值即可，做2d缩放设置<code>a,d</code>值，可以自己做推算试试</p><h4 id="matrix3D"><a href="#matrix3D" class="headerlink" title="matrix3D()"></a>matrix3D()</h4><p>下面重点说matrix3D()，其实martix3D()就是复杂版martix()，多了一个z坐标轴：</p><p><div class="tip">matrix3D(M11, M21, M31, M41, M12, M22, M32, M42, M13, M23, M33, M43, M14, M24, M34, M44)</div><br>对应到矩阵就是：<br><img src="/images/3d-matrix.gif" alt="3d-matrix"><br><img src="/images/3d-operation.gif" alt="3d-operation"></p><p>所以3D位移就是：<code>matrix3D(1, 0, 0, Tx, 0, 1, 0, Ty, 0, 0, 1, Tz, 0, 0, 0, 1)</code><br><img src="/images/3d-translate.gif" alt="3d-translate"></p><p>3D缩放就是：<code>matrix3D(s, 0, 0, 0, 0, s, 0, 0, 0, 0, s, 0, 0, 0, 0, 1)</code><br><img src="/images/3d-scale.gif" alt="3d-scale"></p><p>3D旋转稍复杂些，推算公式在这里：<br><img src="/images/rotate3d-operation.png" alt="rotate3d-operation"><br><img src="/images/rotate3d-operation-params.png" alt="rotate3d-operation-params"><br>我也是坐标轴都画烂了才感觉懂了点<img src="/images/emoticon/51.gif" alt="吐血" style="display:inline; margin:0;"></p><p>管他咧，直接看这个：<br>沿x轴旋转：<code>matrix3D(1, 0, 0, 0, 0, cosθ    , -sin, 0, 0, sin, cos, 0, 0, 0, 0, 1)</code><br><img src="/images/rotate-x.gif" alt="rotate-x"></p><p>沿y轴旋转：<code>matrix3D(cosθ, 0, sinθ, 0, 0, 1, 0, 0, -sinθ, 0, cosθ, 0, 0, 0, 0, 1)</code><br><img src="/images/rotate-y.gif" alt="rotate-y"><br>(擦，这张图还少个数字，我一定是找的假图。。。)</p><p>沿z轴旋转：<code>matrix3D(cosθ, -sinθ, 0, 0, sinθ, cosθ, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)</code><br><img src="/images/rotate-z.gif" alt="rotate-z"></p><p>然后立马做了个实验：<br><a href="https://jsfiddle.net/miyalee/hrk99603/" target="_blank" rel="noopener">3D旋转</a></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>无论是2d动作还是3d动作其实都有更简单容易理解的css3函数，像<code>rotate()</code>，<code>scale()</code>，<code>translate()</code>；对应3d:<code>rotate3d()</code>，<code>scale3d()</code>，<code>translate3d()</code><br>如果你不是强迫症发作，只是想搞定一个动画完全可以用这些没必要用matrix3D折磨自己。不过，万一你感兴趣呢～就酱～</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间做了个主要功能是获取数据，然后更改并提交的表单。数据量比较大，请求时间大概1秒左右，为了获得更好的体验在请求的时候做了个loading的动效。研究过程中好奇心发作吧matrix和matrix3D撸了一遍&lt;img src=&quot;/images/emoticon/79.gif&quot; alt=&quot;给你黄瓜&quot; style=&quot;display:inline; margin:0;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="css3" scheme="http://yoursite.com/tags/css3/"/>
    
      <category term="3D" scheme="http://yoursite.com/tags/3D/"/>
    
  </entry>
  
  <entry>
    <title>不用买域名和服务器，用hexo和git page快速打造一个博客站点！</title>
    <link href="http://yoursite.com/2017/01/05/blog2017-01-05/"/>
    <id>http://yoursite.com/2017/01/05/blog2017-01-05/</id>
    <published>2017-01-05T07:19:16.000Z</published>
    <updated>2017-11-23T04:04:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个拖了很久的坑，开一个自己的站点是一年前就有的想法，然而由于各种各样的原因现在才正式开搞，其中不乏沉迷看番，沉迷游戏，沉迷学习无法自拔<br>不管怎么样，终于有自己的站点啦，今后会将自己接触的感兴趣的所有东西都记录下来耶！等老了看看吐槽下自己，耶～想想就好刺激</p><p>辣么作为第一篇文章，我决定就写一下这个高大上的站点的形成过程！<img src="/images/emoticon/67.gif" alt="开心" style="display:inline; margin:0;"><br><a id="more"></a></p><h4 id="安装hexo并配置"><a href="#安装hexo并配置" class="headerlink" title="安装hexo并配置"></a>安装hexo并配置</h4><p>之前本来想自己写一个，但实在无心顾忌又不想再拖，搜刮了自己的大脑想起了之前看到过的<a href="https://hexo.io/" target="_blank" rel="noopener">hexo</a>，看了一下文档感觉灰常之简便啊！编辑方面也支持我喜欢的markdown，我超爱的极简风主题也是应有尽有，几个命令就能开搞。如果你也是不想在博客内容外的东西费心思，那你还等什么！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ hexo init blog  //blog可以换成你自定义的站点文件夹名字，hexo和你的文档都会在这里</span><br><span class="line">$ cd blog</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>然后可以去<code>_config.yml</code>里定义你的博客名字，描述等等，详细看文档的<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="noopener">配置</a></p><p>定义完了我们就可以开始写文章啦<br><code>$ hexo new title //默认问post布局，title改为你的文章名</code></p><p>然后你就会发现<code>source</code>多了一个文件夹<code>_post</code> 里面乖乖的躺着你刚新建的文档～直接打开编辑就可以啦～</p><h4 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h4><p>文档头部有一些字段，title就是文章标题，date就是文章创建时间，tags是标签，用于博客的归档</p><p>是不是写了两句就想感觉看看效果！你不是一个人！<br>赶紧部署一发！<br><code>$ hexo generate //生成静态文件</code><br>熟悉了直接<code>$ hexo g</code></p><p>刷刷刷生成完毕！</p><p>然后执行：<br><code>$ hexo server 开启服务</code><br>熟练后直接<code>$ hexo s --debug //开启debug模式方便调试</code></p><p>看到命令行最后显示：</p><p><code>INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</code></p><p>然后就可以打开4000端口看效果了～</p><p>看完是不是觉得 好！ 失！ 望！</p><p>默认主题的话奇丑无比难以满足一般审美的我们（笑），解决起来很简单，去hexo官网挑选一个主题就可以啦</p><p>如果没有再文章中写什么奇怪的东西的话保存的时候浏览器那边是自动刷新的（是的我被自己写的奇怪的东西坑过。。。），页面中有乱码也要看看是不是文章里写了hexo不能解析的东西</p><h4 id="hexo与github-page"><a href="#hexo与github-page" class="headerlink" title="hexo与github page"></a>hexo与github page</h4><p>文章写完了但是只能在localhost看，其他小伙伴都看不到好寂寞的怎么办，申请域名买服务器又费钱又麻烦，有没有什么服务可以帮我们做到这些事情呢？</p><p>这时候我突然想起之前看到很多小伙伴的博客域名后缀都是github.io，诶，他们和github是有什么不正当关系？！查了一番资料，原来github提够站点服务，即github page，并且hexo有相对的配置项，可以直接用命令deploy到git上去，作为简单的博客或项目介绍类网站是再合适不过的！</p><p>是不是已经迫不及待了！<img src="/images/emoticon/52.gif" alt="迫不及待" style="display:inline; margin:0;"></p><p>首先按照github page<a href="https://pages.github.com/" target="_blank" rel="noopener">教程</a>新建一个仓库，仓库名即你的自定义域名(重要)。然后更改<code>_config.yml</code>deploy字段如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:×××/××××××.git //新建仓库的ssh</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><p>之后就可以<code>$ hexo deploy</code>直接部署到这个仓库，方便到不能再方便了！</p><p>部署完成后，再浏览器输入你自定义的域名，登登登登～从此好基友也能浏览你的博客啦～<img src="/images/emoticon/71.gif" alt="好基友" style="display:inline; margin:0;"></p><h4 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h4><p>第一次见标签插件这种书写格式，根本不知道怎么使用，搜索资料加上各种尝试才知道跟markdown一起写就可以，费了我好半天时间，好傻</p><p>一开始其实用的是nexT主题因为看起来比较成熟，没想到一篇文章写了大半保存后突然发现不是页面空白就是页面底部有乱码，严重影响进度。</p><p>后来发现head里有个js文件名乱码了无法进行下一步渲染，然而不管怎么查也难以查明这个js文件的源头和出错原因，命令行也只是报了一个</p><div class="tip">“The header content contains invalid characters”</div><p><img src="/images/emoticon/58.gif" alt="吐血" style="display:inline; margin:0;"></p><p>搜到的资料和issues有的说是http-server需要更新有的说是hexo的bug，不管怎样都没有解决。后来我试着把nexT主题换成另外一个喜欢的也就是现在这个主题感觉好了一点。文字太多本地还是会乱码，deploy不会，现在仍未解决<br><a href="https://github.com/hexojs/hexo/issues/2285" target="_blank" rel="noopener">hexo的对应issue</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一个拖了很久的坑，开一个自己的站点是一年前就有的想法，然而由于各种各样的原因现在才正式开搞，其中不乏沉迷看番，沉迷游戏，沉迷学习无法自拔&lt;br&gt;不管怎么样，终于有自己的站点啦，今后会将自己接触的感兴趣的所有东西都记录下来耶！等老了看看吐槽下自己，耶～想想就好刺激&lt;/p&gt;
&lt;p&gt;辣么作为第一篇文章，我决定就写一下这个高大上的站点的形成过程！&lt;img src=&quot;/images/emoticon/67.gif&quot; alt=&quot;开心&quot; style=&quot;display:inline; margin:0;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="git page" scheme="http://yoursite.com/tags/git-page/"/>
    
  </entry>
  
</feed>
